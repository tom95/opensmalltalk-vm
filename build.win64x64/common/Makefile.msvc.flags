#############################################################################
# Common Makefile for Win64 VM using MSVC, e.g. 2017 Community, and gnu make
# Copyright (c) 2020 3D Immersive Collaboration Consulting, LLC
#
# Compilation rules and flags for plugins built with the MSVC toolchain, such
# as the SoundPlugin.
#############################################################################

ARCH:=x64

# Find out where the MSVC tools are if not already defined.
ifeq ($(VCToolsInstallDir),)
# For wildcard we /must/ escape spaces and /must not/ escape parentheses.
RT:=C:/Program\ Files\ (x86)/Microsoft\ Visual\ Studio/2017/Community/VC/Tools/MSVC
VCToolsInstallDir:=$(wildcard $(RT)/*)
else
# If VCToolsInstallDir is taken from the environment then modify it to use the
# Unix / file separator, so that subsequent rules work in both cygwin or cmd
override VCToolsInstallDir:=$(subst \,/,$(VCToolsInstallDir))
endif
$(info VCToolsInstallDir found to be $(VCToolsInstallDir))
override VCINSTALLDIR:=$(subst \,/,$(VCINSTALLDIR))
# For wildcard we /must/ escape spaces and /must not/ escape parentheses.
# For shell we escape spaces and parentheses.
# It shouldn't be this hard, but it is...
override VCINSTALLDIR:=$(shell echo "$(VCINSTALLDIR)" | sed 's/ /\\ /g')
override VCINSTALLDIRSH:=$(shell echo "$(VCINSTALLDIR)" | sed 's/[()]/\\&/g')

#############################################################################
# C compiler settings assuming Visual C++ 2017 Community Edition
#
# Try and choose a compiler.  In order try:
# If LLVM is installed in C:\Program FIles\LLVM use clang-cl.exe from there.
# Otherwise use MSVC
#

$(info VCINSTALLDIR=$(VCINSTALLDIR))
$(info VCINSTALLDIRSH=$(VCINSTALLDIRSH))
#$(info wildcard VCINSTALLDIR $(wildcard $(VCINSTALLDIR)/.*))
$(info wildcard  C:/Program\ Files/LLVM/bin/.* $(wildcard C:/Program\ Files/LLVM/bin/.*))

ifneq ($(wildcard C:/Program\ Files/LLVM/bin/.*),)
$(info LLVM/Clang detected)
CC:="C:/Program Files/LLVM/bin/clang-cl.exe"
Clang:=Clang
undefine MSVC
else
$(info Clang not found; using MSVC)
override TOOLPREFIX:="$(VCToolsInstallDir)bin/HostX64/x64/"
MSVC:=MSVC
undefine Clang
CC:=$(TOOLPREFIX)cl.exe -nologo
endif
$(info CC=$(CC))
AS:=ml64


ifeq ($(WindowsSdkDir),)
WindowsSdkDir:=C:/Program Files (x86)/Windows Kits/10/
else
override WindowsSdkDir:=$(subst \,/,$(WindowsSdkDir))
endif
ifeq ($(WindowsSDKVersion),)
WindowsSDKVersion:=10.0.15063.0
else
WindowsSDKVersion:=$(subst \,,$(WindowsSDKVersion))
endif
ifeq ($(INCLUDE),)
INCLUDE:=$(VCToolsInstallDir)/ATLMFC/include;$(VCToolsInstallDir)/include;$(WindowsSdkDir)/include/$(WindowsSDKVersion)/shared;$(WindowsSdkDir)/include/$(WindowsSDKVersion)/ucrt;$(WindowsSdkDir)/include/$(WindowsSDKVersion)/um;$(WindowsSdkDir)/include/$(WindowsSDKVersion)/winrt
INCLUDE:=$(subst //,/,$(INCLUDE))
INCLUDE:=$(subst /,\,$(INCLUDE))
#$(info INCLUDE is $(INCLUDE))
endif
MSVCINCLUDES:=-I"$(subst \,/,$(subst ;," -I",$(INCLUDE)))"
#$(info MSVCINCLUDES is $(MSVCINCLUDES))

# DO NOT USE := FOR OFLAGS BECAUSE SOME PLUGINS REDEFINE THIS!!
# -Z7 debug info in files; -Zi debug info in PDB
# Turn off BUFFER_SECURITY for functional setjmp/longjmp
BUFFER_SECURITY:=-GS-
ifdef MSVC
PRODUCTION_OFLAGS:=-Ox -Ob1 -Oi -Oy $(BUFFER_SECURITY)
ASSERT_OFLAGS:=-Os -Oi- -Oy- $(BUFFER_SECURITY)
DEBUG_OFLAGS:=-Od $(BUFFER_SECURITY)
DASH_O:=-Fo
OFLAGS= -Ot $(BUFFER_SECURITY)
CFLAGS=	-MD -DLLP64=1 -DWIN64=1 -Z7 $(OFLAGS) \
	-Dalloca=_alloca -Dhuge=my_huge \
	-EHsc $(NOBUILTIN) $(WARNINGS)
else ifdef Clang
PRODUCTION_OFLAGS:=-Ox -Ob1 -Oi -Oy $(BUFFER_SECURITY)
ASSERT_OFLAGS:=-Os -Oi- -Oy- $(BUFFER_SECURITY)
DEBUG_OFLAGS:=-Od $(BUFFER_SECURITY)
DASH_O:=-o
OFLAGS= -Ot $(BUFFER_SECURITY)
CFLAGS=	-MD -DLLP64=1 -DWIN64=1 -Z7 $(OFLAGS) \
	-Dalloca=_alloca -Dhuge=my_huge \
	-EHsc $(NOBUILTIN) $(WARNINGS)
endif
# Make all setjmp/longjmp varieties to our _setjmp/_longjmp in _setjmp-x86.asm
JMPDEFS:=-Dsetjmp=_setjmp -Dlongjmp=_longjmp -D_siglongjmp=_longjmp

# Do _not_ define NDEBUG.  The entire point of the msvc build is to debug with
# MSVC and defining NDEBUG installs a default catch-everything exception handler
# that effectively disables debugging.
# XDEFS=	-DSQUEAK_BUILTIN_PLUGIN
# Include the Microsoft headers and any extras.
# Put -I. last because boost includes bizarreness such as
# include <list> which will include a local file called list if -I. comes
# early in the include path.  Fragile.
# override INCLUDES:= $(filter-out -I., $(INCLUDES)) $(MSVCINCLUDES) $(XINC) -I.
INCLUDES:= $(filter-out -I., $(INCLUDES)) $(MSVCINCLUDES) $(XINC) -I.
